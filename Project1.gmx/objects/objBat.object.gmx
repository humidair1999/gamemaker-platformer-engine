<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
facing = choose(1, -1);
hp = 1;
///Animation speed
image_speed = 0.1;
sprite_index = sprBatSleep;
///Velocity &amp; limits
move_speed = 1;
///Gravity
grav = 0;
///Friction
air_frict = 0.08;
ground_frict = 0.08;
///Acceleration
air_acc = 0.05;
ground_acc = 0.05;
///Misc
x_bounce = 0.6;
y_bounce = 0.6;
damage = 1;
knockback = 3;
sleeping = true;
target = noone; //who is the bat chasing?
sight_distance = 100; //how far can the bat see?
block = noone;
alarm[0] = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create dead enemy
event_user(0); //remove from block's stuck list
var a = instance_create(x, y, objDead);
a.sprite_index = sprBatDead;
var f = 1;
a.hsp += hsp*f;
a.vsp += vsp*f;
a.facing = facing;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get block above
///This is so that the bat dies if the block it's attached to is destroyed
block = instance_place(x, y-1, objSolid);
if (block == noone)
{
    instance_destroy();
}
else
{
    with (block)
    {
        ds_list_add(stuck, other.id);
    }
}
//This is done in alarm 0 to ensure that all of the blocks
//have initialised their stuck lists.


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wake up when taking damage - this must be before the inherited code
///because take_damage will always be 0 after the inherited code
if (take_damage &gt; 0)
{
    if (damager != noone)
    {
        sleeping = false;
        target = damager;
        event_user(0); //remove from block's stuck list
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; sprite setting
if (sleeping)
{
    ///Set sprite &amp; animation speed for sleeping bat
    sprite_index = sprBatSleep;
    image_speed = 0;
    ///Keep speed at 0
    hsp = 0;
    vsp = 0;
}
else
{
    ///Set sprite &amp; animation speed for flying bat
    sprite_index = sprBat;
    image_speed = 0.6;
    ///If our target still exists, move towards it
    ///and face towards it.
    if (target != noone)
    {
        if (instance_exists(target))
        {
            ///Move towards target
            var dir = point_direction(x, y, mid_x(target), mid_y(target));
            move_x = lengthdir_x(1, dir);
            move_y = lengthdir_y(1, dir);
            ///Set facing direction
            ///depending on whether the target is left/right of us
            facing = ((target.x &gt; x)*2)-1;
        }
        else
        {
            target = noone;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wake up when player nearby!
if (sleeping)
{
    if (instance_exists(objPlayer))
    {
        var obj = instance_nearest(x, y, objPlayer);
        var mx = mid_x(obj);
        var my = mid_y(obj);
        ///Check if the target is close enough
        if (point_distance(x, y, mx, my) &lt; sight_distance)
        {
            ///Check if we have line of sight on the target.
            ///If we do... attack!
            if (line_of_sight(x, y, mx, my, 4))
            {
                sleeping = false;
                target = obj;
                event_user(0); //remove from block's stuck list
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEntity">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage target entity
if (other.id == target)
{
    other.take_damage += damage;
    var dir = point_direction(mid_x(), mid_y(), mid_x(other), mid_y(other));
    with (other)
    {
        add_speed(other.knockback, dir);
        vsp -= 1;
    }
    add_speed(-knockback, dir);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove from block's stuck list
with (block)
{
    var i = ds_list_find_index(stuck, other.id);
    if (i != -1)
    {
        ds_list_delete(stuck, i);
    }
}
block = noone;



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
