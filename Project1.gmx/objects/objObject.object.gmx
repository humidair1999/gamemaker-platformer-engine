<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoParent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
///This code sets GM's built in variables to 0
///becase we'll be using hsp, vsp, grav instead
image_speed = 0;
hspeed = 0;
vspeed = 0;
gravity = 0;
friction = 0;
image_xscale = 1;
image_yscale = 1;
///position/movement variables
previous_hsp = 0;
previous_vsp = 0;
hsp = 0;
vsp = 0;
hsp_max = 10;
vsp_max = 10;
weight = 1; //&lt; weight used to determine liquid &amp; bouncy platform impact
///cx and cy are used for non-full pixel movement
cx = 0;
cy = 0;
xscale = 1;
yscale = 1;
///In water?
in_water = false;
///Use slopes? Turn off too boost performance (or delete the slope code in End Step)
slopes = true;
///Fall through semi-solid platforms?
fallthrough = false;
///Can the object collide with blocks?
collide = true;
///Did the object collide in the last frame?
collide_x = false;
collide_y = false;
///How much should the object bounce when colliding? 0 = no bounce, 1 = full bounce
x_bounce = 0;
y_bounce = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

///Collide with water
var previous_in_water = in_water;
in_water = place_meeting(x, y, objLiquid);
if (previous_in_water != in_water)
{
    collide_water(weight);
}

///Limit speed
vsp = clamp(vsp, -vsp_max, vsp_max);
hsp = clamp(hsp, -hsp_max, hsp_max);

///Store previous velocity variables
previous_hsp = hsp;
previous_vsp = vsp;

///Check if this object can collide
if (collide)
{
    //Reset last colliding variables
    collide_y = false;
    collide_x = false;
    
    //This is for inter-pixel movement!
    cx += hsp;
    cy += vsp;
    var hspNew = floor(cx);
    var vspNew = floor(cy);
    cx -= hspNew;
    cy -= vspNew;
    
    //Vertical
    repeat(abs(vspNew))
    {
        var svsp = sign(vspNew);
        if (check_collision(0, svsp))
        {
            //Get the block collided with, and prompt
            //the block's "collide with entity" event
            with (instance_place(x, y+svsp, objBlock))
            {
                entity = other.id;
                event_user(0);
            }
            //Bounce vsp back, or if bounce is 0 then
            //set vsp to 0
            vsp *= -y_bounce;
            if (abs(vsp) &lt; 0.2)
            {
                vsp = 0;
            }
            //Set collide_y to true for this step
            collide_y = true;
            break;
        }
        else
        {
            y += svsp;
        }
    }
    
    //Horizontal
    repeat(abs(hspNew))
    {
        var shsp = sign(hspNew);
        if (slopes)
        {
            //Move up slope
            if (check_collision(shsp, 0) &amp;&amp; !check_collision(shsp, -1))
            {
                --y;
                hsp *= 0.86; //reduce horizontal speed when going up a slope
            }
            //Move down slope
            if (!check_collision(shsp, 0) &amp;&amp; !check_collision(shsp, 1) &amp;&amp; check_collision(shsp, 2))
            {
                ++y;
            }
        }
        //Collide with walls
        if (check_collision(shsp, 0))
        {
            //Get the block collided with, and prompt
            //the block's "collide with entity" event
            with (instance_place(x+shsp, y, objBlock))
            {
                entity = other.id;
                event_user(0);
            }
            //Bounce hsp back, or if bounce is 0 then
            //set hsp to 0
            hsp *= -x_bounce;
            if (abs(hsp) &lt; 0.2)
            {
                hsp = 0;
            }
            //Set collide_x to true for this step
            collide_x = true;
            break;
        }
        else
        {
            x += shsp;
        }
    }
}
else
///If this object doesn't collide, then just move
{
    x += hsp;
    y += vsp;
}

///Reset moving platform variable
moving_platforms = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
