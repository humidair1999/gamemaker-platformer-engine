<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoParent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set factors
acc_factor = 1;
grav_factor = 1;
frict_factor = 1;
move_factor = 1;
jump_factor = 1;
entity_list = ds_list_create();

hsp_max = 3;
vsp_up = -3;
vsp_down = 2;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up liquidiness
quality = 1;
spread = 0.0125; //How much the bounciness of the water spreads outwards
dampening = 0.05; //The "friction" of the water points. The lower the number, the longer it takes for waves to settle
constant = 0.015; //How fast the water points move

image_blend = merge_colour(c_blue, c_aqua, 0.75);
foam_colour = merge_colour(c_white, image_blend, 0.25)

//create physics points
points = quality*image_xscale*2;
for (i = 0; i &lt;= points; i++)
{
    var p = instance_create(x+i*(8/quality), y, objLiquidPoint);
    p.max_y = y+8*image_yscale;
    p.parent = id;
    pointList[i] = p;
}

end_y = bbox_bottom*image_yscale;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create water drawer if it doesn't already exist
/*if (!instance_exists(objWaterDrawer))
{
    instance_create(0, 0, objWaterDrawer);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free list memory
ds_list_destroy(entity_list);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Affect objects in the water
ds_list_destroy(entity_list);
entity_list = collision_multiple(x, y, objObject);
var size = ds_list_size(entity_list);
for (var i = 0; i &lt; size; i++)
{
    with (entity_list[|i])
    {
        //Apply factors
        move_factor = other.move_factor;
        acc_factor = other.acc_factor;
        frict_factor = other.frict_factor;
        jump_factor = other.jump_factor;
        grav_factor = other.grav_factor;
        //Limit speed
        hsp = clamp(hsp, -other.hsp_max, other.hsp_max);
        vsp = clamp(vsp, other.vsp_up, other.vsp_down);
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Springy code: pull each point toward its neighbours
for (i = 0; i &lt;= points; i++)
{
    if (i &gt; 0)
    {
        var l = pointList[i-1];
        var left = spread*(pointList[i].y-l.y);
        l.vspeed += left;
        l.y += left;
    }
    if (i &lt; points-1)
    {
        var r = pointList[i+1];
        var right = spread*(pointList[i].y-r.y);
        r.vspeed += right;
        r.y += right;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free list memory
ds_list_destroy(entity_list);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw liquid

//Draw water primitive
draw_set_colour(image_blend);
draw_set_alpha(0.3);
draw_primitive_begin(pr_trianglestrip);
for (var i = 0; i &lt;= points; i++)
{
    var p = pointList[i];
    draw_vertex(p.x, p.y); //draw vertex at surface of water
    draw_vertex(p.x, end_y); //draw vertex at bottom of water
}
draw_primitive_end();
draw_set_alpha(1);
draw_set_colour(c_white);

//Draw white "foam" on moving water points
draw_set_colour(foam_colour);
for (var i = 0; i &lt;= points; i++)
{
    var p = pointList[i];
    if (p.vspeed != 0)
    if (i != points) //forget about the last point in the list
    {
        var p2 = pointList[i+1];
        var r = (1-cos(p.vspeed/2))*4; //formula for calculating the radius/width based on speed
        if (r &gt; 0.1)
        {
            var x1 = p.x; var y1 = p.y-1;
            var x2 = p2.x; var y2 = p2.y-1;
            draw_line_width(x1, y1, x2, y2, r*2);
            draw_circle(x1, y1, r, false);
            draw_circle(x2, y2, r, false);
        }
    }
}
draw_set_colour(c_white);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
