<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoParent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up
target = noone; //the object or instance that we want to hit
parent = noone;
hsp = 0;
hsp_max = 50;
vsp = 0;
vsp_max = 50;
cs = 0; //&lt; for inter-pixel movement
grav = 0; //gravity
grav_dir = 270; //direction of gravity (default: down)
grav_add = 0; //how much gravity is added to each step
grav_max = 5; //maximum gravity
frict = 0; //friction in both directions
damage = 1;
knockback = 1;
wrapped = false; //true if the object wrapped around the screen this step
collided = ds_list_create(); //list of collided objects, so as not to collide again
pierce = 0; //how many objects to pierce through before destroying
hit = noone; //the instance we hit upon destruction
bounce = 0; //number of times to bounce off walls
bounce_x = 0; //amount of bounce
bounce_y = 0;
fallthrough = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up
ds_list_destroy(collided);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; collisions

///Check if parent still exists
if (parent != noone)
if (!instance_exists(parent))
{
    parent = noone;
}

///Gravity
if (grav != 0)
{
    hsp += lengthdir_x(grav, grav_dir);
    vsp += lengthdir_y(grav, grav_dir);
}

///Increase gravity over time, up until a maximum amount
grav = min(grav+grav_add, grav_max);

///Limit speed
hsp = clamp(hsp, -hsp_max, hsp_max);
vsp = clamp(vsp, -vsp_max, vsp_max);

///Calculate directional speed
var sp = point_distance(0, 0, hsp, vsp);
direction = point_direction(0, 0, hsp, vsp);

///This is for inter-pixel movement
var isp = sp;

///Movement
while(isp &gt; 0)
{
    //Move in direction of travel
    var i = min(1, isp);
    var x_add = lengthdir_x(i, direction);
    var y_add = lengthdir_y(i, direction);
    isp -= i;
    
    //Check for blocks at new position
    var block = instance_place(x+x_add, y+y_add, objSolid);
    if (block != noone)
    {
        if (bounce &gt; 0)
        {
            bounce--;
            hsp *= -bounce_x;
            vsp *= -bounce_y;
            break;
        }
        else
        {
            hit = block;
            x += x_add; y += y_add;
            instance_destroy();
            break;
        }
    }
    else
    {
        //Check for semi-solid blocks at new position
        if (!fallthrough)
        {
            var platform = instance_place(x+x_add, y+y_add, objSemiSolid);
            if (platform != noone)
            {
                if (bounce &gt; 0)
                {
                    bounce--;
                    hsp *= -bounce_x;
                    vsp *= -bounce_y;
                    break;
                }
                else
                {
                    hit = platform;
                    x += x_add; y += y_add;
                    instance_destroy();
                    break;
                }
            }
        }
        var inst = instance_place(x+x_add, y+y_add, target);
        if (inst != noone &amp;&amp;
            inst != parent &amp;&amp;
            ds_list_find_index(collided, inst) == -1)
        {
            if (inst.can_damage)
            {
                //Damage!
                inst.take_damage += damage;
                inst.damager = parent;
                //Knockback!
                var dir = point_direction(xprevious, yprevious, mid_x(inst), mid_y(inst));
                with (inst)
                {
                    add_speed(other.knockback, dir);
                    vsp -= min(1, other.knockback);
                }
                //Reduce pierce by 1
                pierce--;
                if (pierce &lt; 0)
                {
                    hit = inst;
                    instance_destroy();
                    break;
                }
            }
            //Add to list so that we don't collide with it again
            ds_list_add(collided, inst);
        }
        else
        {
            x += x_add;
            y += y_add;
        }
    }
}

///Wrap around screen
wrapped = wrap(8);

///Friction
if (frict != 0)
{
    hsp = approach(hsp, 0, frict);
    vsp = approach(vsp, 0, frict);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up
ds_list_destroy(collided);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
